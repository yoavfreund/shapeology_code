import os
import numpy as np
import pickle as pk
import numpy as np
from glob import glob
from time import time
import sys
sys.path.append('../scripts/')
from lib.utils import *
from lib.permute import permutator

time_log=[]
def clock(message):
    print('%s \t%8.1f'%(message, time()))
    time_log.append((message, time()))

class Sorter:
    """Process the patch files generated by extractPatches.py and prepare
    them for analysis by Kmeans and diffusion-maps"""
    def __init__(self, temp_root='/tmp'):
        '''
        Initialize a files sorter.
        :param temp_root: directory for temporary files without permutation
        '''
        self.temp_root = temp_root
        self.Permutators = {}

    def sort_file(self, pkl_file, size):
        '''
        Take the patch files generated by extractPatches.py, classify patches by size and store patches in a random order.
        :param pkl_file: path to the patch files generated by extractPatches.py
        :param size: size of patches
        :return:
        '''
        # V = pk.load(open(pkl_file, 'rb'))
        V = np.fromfile(pkl_file, np.float16)
        V = V.reshape([-1,size,size])

        for e in V:
            # size = e['padded_size']
            # tile = e['padded_patch']
            tile = e
            if tile is None:
                continue
            tile = tile.astype(np.float16)
            asbytes = bytearray(tile.tobytes())
            # print('size:',size,len(asbytes))

            if not size in self.Permutators:
                self.Permutators[size] = permutator(asbytes, temp_root=self.temp_root)

            self.Permutators[size].push(asbytes)

    def close(self, stem='permuted'):
        '''
        Read and permute each file randomly collecting patches to achieve a random permutation of patches of all sizes.
        :param stem: name stem of directory to store the final results
        :return:
        '''
        for size in self.Permutators.keys():
            Permutator = self.Permutators[size]
            Permutator.combine('%s-%d' % (stem, size))
            clock('Permute files of size ' + str(size))


if __name__=='__main__':

    yamlfile = os.environ['REPO_DIR'] + 'shape_params-aws.yaml'
    params = configuration(yamlfile).getParams()
    stack = 'DK39'
    root_dir = os.environ['ROOT_DIR']
    sorter = Sorter(temp_root=root_dir + 'tmp')

    clock('Process Begin')
    t0 = time()
    size_thresholds = params['normalization']['size_thresholds']
    for size in size_thresholds:
        for fn in glob(root_dir + stack + '/permuted/' + 'permuted-' + str(size) + '/*.bin'):
            sorter.sort_file(fn, size)
        clock('Sort files of size '+str(size))
    print('Sort process finished in', time() - t0, 'seconds')
    sorter.close(root_dir + 'permute/permuted')
    print('Permute process finished in', time() - t0, 'seconds')
    log_fp = 'TimeLog/'
    if not os.path.exists(log_fp):
        os.mkdir(log_fp)
    pk.dump(time_log,open(log_fp+'Time_log_permute.pkl','wb'))